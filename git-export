#!/bin/sh
#
# Copyright (c) 2008 Daniel Schierbeck
#
# Export the contents of the git index to a specified directory

USAGE="[-f | --force] [-b <branch> | --branch=<branch> ] <destination>"
LONG_USAGE="Export the contents of the git index to the specified directory"
SUBDIRECTORY_OK=Yes
OPTIONS_SPEC=
. "`git --exec-path`/git-sh-setup"


force=0
branch=0
branch_name=
destination=

TMP_DIR=`mktemp -d`

args=`getopt -o fhb: -l branch:,force,help,he,hel -- "$@"`
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$args"

while true ; do
  case "$1" in
    -f|--force)
      force=1
      shift
      ;;
    -h|--h|--he|--hel|--help)
      usage
      shift
      ;;
    -b|--branch)
      shift
      branch=1
      branch_name=$1
      shift
      ;;
    --)
      shift; break ;;
    *)
      die "Invalid argument found!"
      exit 2;
      ;;
  esac
done

if [ $# -ne 1 ]
then 
  die "You can only export to a single destination"
  exit 1
fi

if [ -e $1 -a $force -ne 1 ]
then
  die "$1 already exists. Use --force to overwrite any existing files."
  exit 1
fi

if [ $branch -eq 1 ]
then
  # If we're going to get a branch without breaking the current reposigory, 
  # looks like we will have to clone the git repo, pushd into the clone, 
  # do a git checkout to the branch, then do the checkout-index, and 
  # finally delete the clone.
  # If there's a more elegant way to do this, I would like to know.
  
  echo "Generating clone of git repository with branch '${branch_name}' checked out"
  
  # Make a clone of current into temp directory.
  git clone -q . $TMP_DIR/
  
  # Check if this returns an error.
  LAST_ERROR=$?
  if [ $LAST_ERROR -ne 0 ]
  then
    die "Error cloning repository to temp directory! Exiting..."
    rm -rf $TMP_DIR
    exit $LAST_ERROR
  fi
  
  # Store current directory and move to temporary clone repository
  CUR_DIR=`pwd`
  cd $TMP_DIR
  
  # Checkout branch in clone repository
  git checkout -q $branch_name
  
  # Check for errors.
  LAST_ERROR=$?
  if [ $LAST_ERROR -ne 0 ]
  then
    die "Error on checkout of requested branch. Is '$branch_name' an existing branch? Exiting..."
    # Move back to last directory and cleanup.
    cd $CUR_DIR
    rm -rf $TMP_DIR
    exit $LAST_ERROR
  fi
fi

destination=$1

cd_to_toplevel

echo "Exporting git repository to ${destination}"

git checkout-index -a -f --prefix=${destination}/

if [ $branch -eq 1 ]
then
  echo "Cleaning up"
  # Go back to the original directory and cleanup clone

  cd $CUR_DIR
  rm -rf $TMP_DIR
fi
